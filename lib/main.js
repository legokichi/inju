// Generated by CoffeeScript 1.10.0
(function() {
  var Ajax, SurfaceUtil, WebSocket, cursor_img, depth_cnv, endEpisode, getImage, image_cnv, main, named, nmdmgr, recur, reward, sence, setup, ws;

  Ajax = window.duxca.lib.Ajax;

  SurfaceUtil = window.cuttlebone.SurfaceUtil;

  WebSocket = window.WebSocket;

  nmdmgr = null;

  named = null;

  image_cnv = null;

  depth_cnv = null;

  cursor_img = null;

  ws = null;

  reward = 0;

  endEpisode = false;

  setup = function(next) {
    return Promise.all([NarLoader.loadFromURL("./nar/first.nar"), NarLoader.loadFromURL("./nar/origin.nar")]).then(function(arg) {
      var balloon, balloonDir, balloonNanikaDir, shell, shellDir, shellNanikaDir;
      shellNanikaDir = arg[0], balloonNanikaDir = arg[1];
      shellDir = shellNanikaDir.getDirectory("shell/master").asArrayBuffer();
      balloonDir = balloonNanikaDir.asArrayBuffer();
      shell = new cuttlebone.Shell(shellDir);
      balloon = new cuttlebone.Balloon(balloonDir);
      return Promise.all([shell.load(), balloon.load()]);
    }).then(function(arg) {
      var balloon, hwnd, shell;
      shell = arg[0], balloon = arg[1];
      window.nmdmgr = nmdmgr = new cuttlebone.NamedManager();
      document.body.appendChild(nmdmgr.element);
      hwnd = nmdmgr.materialize(shell, balloon);
      window.named = named = nmdmgr.named(hwnd);
      named.scope(0).surface(0);
      named.scope(1).surface(-1);
      return named.on("mousemove", function(ev) {
        var left, offsetX, offsetY, ref, region, scopeId, surface, top;
        surface = named.scope(0).surface();
        ref = $(surface.element).offset(), top = ref.top, left = ref.left;
        offsetX = ev.offsetX, offsetY = ev.offsetY, scopeId = ev.scopeId, region = ev.region;
        $(cursor_img).css("top", top + offsetY);
        $(cursor_img).css("left", left + offsetX);
        console.log(ev);
        if (/Bust/.test(region)) {
          named.scope(0).surface(25);
          return reward += 1;
        } else if (/Face/.test(region)) {
          named.scope(0).surface(7);
          return reward -= 1;
        }
      });
    }).then(function() {
      var left, ref, surface, top;
      image_cnv = $("#image")[0];
      depth_cnv = $("#depth")[0];
      surface = named.scope(0).surface();
      ref = $(surface.element).offset(), top = ref.top, left = ref.left;
      return cursor_img = $("<img src='./cursor.png' />").css({
        "position": "absolute",
        top: top,
        left: left
      }).appendTo("body")[0];
    }).then(function() {
      window.ws = ws = new WebSocket('ws://localhost:8765/ws');
      ws.binaryType = 'arraybuffer';
      ws.onerror = function(err) {
        throw err;
      };
      return ws.onopen = function() {
        console.log("open");
        return next();
      };
    })["catch"](function(err) {
      return setTimeout(function() {
        throw err;
      });
    });
  };

  main = function(next) {
    var left, ref, surface, top;
    next();
    reward = 0;
    named.scope(0).surface(0);
    surface = named.scope(0).surface();
    named.scope(0).blimp().clear();
    ref = $(surface.element).offset(), top = ref.top, left = ref.left;
    $(cursor_img).css({
      top: top,
      left: left
    });
    return recur(0);
  };

  recur = function(i) {
    return sence(function() {
      if (i > 30) {
        return setTimeout(function() {
          return main(function() {
            endEpisode = true;
            return console.log("step");
          });
        });
      } else {
        return setTimeout(function() {
          return recur(i + 1);
        });
      }
    });
  };

  sence = function(next) {
    var _left, _top, ctx, left, ref, ref1, surface, top;
    image_cnv.width = image_cnv.width;
    surface = named.scope(0).surface();
    ref = $(cursor_img).offset(), top = ref.top, left = ref.left;
    ref1 = $(surface.element).offset(), _top = ref1.top, _left = ref1.left;
    ctx = image_cnv.getContext("2d");
    ctx.drawImage(surface.cnv, 0, 0);
    ctx.drawImage(cursor_img, left - _left, top - _top);
    return Promise.all([Ajax.getArrayBuffer(image_cnv.toDataURL("image/png")), Ajax.getArrayBuffer(depth_cnv.toDataURL("image/png"))]).then(function(arg) {
      var depth_arr, depth_buf, image_arr, image_buf, o, pack;
      image_buf = arg[0], depth_buf = arg[1];
      image_arr = Array.from(new Uint8Array(image_buf));
      depth_arr = Array.from(new Uint8Array(depth_buf));
      o = {
        reward: reward,
        endEpisode: endEpisode,
        image: image_arr,
        depth: depth_arr,
        hoge: [0, 0, 0]
      };
      endEpisode = false;
      pack = msgpack.encode(o);
      ws.send(pack.buffer);
      return ws.onmessage = function(ev) {
        var isHit, name, ref2, ref3, ref4, ref5;
        console.log(ev);
        ref2 = $(cursor_img).offset(), top = ref2.top, left = ref2.left;
        switch (ev.data) {
          case "0":
            $(cursor_img).css("top", top + 20);
            break;
          case "1":
            $(cursor_img).css("left", left + 20);
            break;
          case "2":
            "stay here";
            break;
          default:
            console.warn(ev.data);
        }
        surface = named.scope(0).surface();
        ref3 = $(cursor_img).offset(), top = ref3.top, left = ref3.left;
        ref4 = $(surface.element).offset(), _top = ref4.top, _left = ref4.left;
        ctx.drawImage(cursor_img, left - _left, top - _top);
        ref5 = SurfaceUtil.getRegion(surface.cnv, surface.surfaceNode, left - _left, top - _top), isHit = ref5.isHit, name = ref5.name;
        console.log(name);
        if (/Bust/.test(name)) {
          named.scope(0).surface(25);
          named.scope(0).blimp().talk("・・・");
          reward += 10;
        } else if (/Face/.test(name)) {
          named.scope(0).surface(7);
          named.scope(0).blimp().talk("痛い！");
          reward -= 1;
        }
        return next();
      };
    });
  };

  window.addEventListener("DOMContentLoaded", function() {
    return setup(function() {
      return main(function() {
        return console.log("init main");
      });
    });
  });

  window.addEventListener("error", function(ev) {
    var err, pre;
    err = ev.error;
    console.error(err);
    if (err instanceof Error) {
      pre = $("<pre />").append("<br>" + err).append("<br>" + err.message).append("<br>" + err.stack);
    } else if (Object.prototype.toString.call(err) === "[object Object]") {
      pre = $("<pre />").append("<br>" + JSON.stringify(err));
    } else {
      pre = $("<pre />").append("<br>" + err);
    }
    return $("body").css({
      "background-color": "gray"
    }).append(pre);
  });

  getImage = function(url, cb) {
    var img;
    img = new Image();
    img.src = url;
    img.onload = cb;
    return img.onerror = function(ev) {
      throw ev;
    };
  };

}).call(this);
